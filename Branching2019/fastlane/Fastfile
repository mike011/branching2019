# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

#require_relative "../buildscripts/codeCoverage.rb"

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.131.0"

default_platform :ios

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  desc "Creates a new version of Branching by bumping the major version (X.0.0)"
  lane :major_release do
    options = Hash.new
    options[:bump_type] = "major"
    create_release(options)
  end

  desc "Creates a new version of Branching by bumping the minor version (*.X.0)"
  lane :release do
    options = Hash.new
    options[:bump_type] = "minor"
    create_release(options)
  end

  desc "Creates a new hotfix of Branching by bumping the patch version (*.*.X)"
  lane :hotfix do
    options = Hash.new
    options[:bump_type] = "patch"
    create_release(options)
  end

  private_lane :create_release do |options|
    if ENV["GITHUB_TOKEN"].to_s.strip.empty?
      raise "GITHUB_TOKEN needs to set so you can create a release"
    end

    ensure_git_status_clean()
    ensure_git_branch(branch: 'master')

    old_version = get_version_number(xcodeproj: "Branching2019.xcodeproj")
    puts " - Current version is " + old_version

    increment_version_number(bump_type: options[:bump_type])
    new_version = get_version_number(xcodeproj: "Branching2019.xcodeproj")
    puts " - New version is " + new_version

    puts "Checking out branch release/" + new_version
    sh "git checkout -b release/" + new_version

    git_commit(path: "Branching2019/Info.plist", message: "Version Bump to " + new_version)

    add_git_tag(tag: new_version)

    changelog = changelog_from_git_commits(
      between: [old_version, new_version],
      quiet: true
    )

    sh "git fetch --tags --force"
    push_git_tags

    set_github_release(
      repository_name: "mike011/branching2019",
      api_token: ENV["GITHUB_TOKEN"],
      name: new_version,
      tag_name: new_version,
      description: changelog,
      commitish: master
    )

    puts "Checking out master"
    sh "git checkout master"

    puts "Deleting release/" + new_version + " branch"
    sh "git branch -d release/" + new_version
  end
end
